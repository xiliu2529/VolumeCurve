"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processTreeDataRows = exports.loadServerRows = exports.disableDelay = exports.DEFAULT_SERVER_OPTIONS = exports.DEFAULT_DATASET_OPTIONS = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _xDataGridPro = require("@mui/x-data-grid-pro");
var _randomGenerator = require("../services/random-generator");
const DEFAULT_DATASET_OPTIONS = exports.DEFAULT_DATASET_OPTIONS = {
  dataSet: 'Commodity',
  rowLength: 100,
  maxColumns: 6
};
const disableDelay = exports.disableDelay = typeof DISABLE_CHANCE_RANDOM !== 'undefined' && DISABLE_CHANCE_RANDOM;
const DEFAULT_SERVER_OPTIONS = exports.DEFAULT_SERVER_OPTIONS = {
  minDelay: disableDelay ? 0 : 100,
  maxDelay: disableDelay ? 0 : 300,
  useCursorPagination: true
};
const apiRef = {};
const simplifiedValueGetter = (field, colDef) => row => {
  return colDef.valueGetter?.(row[row.id], row, colDef, apiRef) || row[field];
};
const getRowComparator = (sortModel, columnsWithDefaultColDef) => {
  if (!sortModel) {
    const comparator = () => 0;
    return comparator;
  }
  const sortOperators = sortModel.map(sortItem => {
    const columnField = sortItem.field;
    const colDef = columnsWithDefaultColDef.find(({
      field
    }) => field === columnField);
    return (0, _extends2.default)({}, sortItem, {
      valueGetter: simplifiedValueGetter(columnField, colDef),
      sortComparator: colDef.sortComparator
    });
  });
  const comparator = (row1, row2) => sortOperators.reduce((acc, {
    valueGetter,
    sort,
    sortComparator
  }) => {
    if (acc !== 0) {
      return acc;
    }
    const v1 = valueGetter(row1);
    const v2 = valueGetter(row2);
    return sort === 'desc' ? -1 * sortComparator(v1, v2) : sortComparator(v1, v2);
  }, 0);
  return comparator;
};
const buildQuickFilterApplier = (filterModel, columns) => {
  const quickFilterValues = filterModel.quickFilterValues?.filter(Boolean) ?? [];
  if (quickFilterValues.length === 0) {
    return null;
  }
  const appliersPerField = [];
  const stubApiRef = {
    current: {
      getRowFormattedValue: (row, c) => {
        const field = c.field;
        return row[field];
      }
    }
  };
  columns.forEach(column => {
    const getApplyQuickFilterFn = column?.getApplyQuickFilterFn;
    if (getApplyQuickFilterFn) {
      appliersPerField.push({
        column,
        appliers: quickFilterValues.map(quickFilterValue => {
          return {
            fn: getApplyQuickFilterFn(quickFilterValue, column, stubApiRef)
          };
        })
      });
    }
  });
  return function isRowMatchingQuickFilter(row, shouldApplyFilter) {
    const result = {};

    /* eslint-disable no-labels */
    outer: for (let v = 0; v < quickFilterValues.length; v += 1) {
      const filterValue = quickFilterValues[v];
      for (let i = 0; i < appliersPerField.length; i += 1) {
        const {
          column,
          appliers
        } = appliersPerField[i];
        const {
          field
        } = column;
        if (shouldApplyFilter && !shouldApplyFilter(field)) {
          continue;
        }
        const applier = appliers[v];
        const value = row[field];
        if (applier.fn === null) {
          continue;
        }
        const isMatching = applier.fn(value, row, column, stubApiRef);
        if (isMatching) {
          result[filterValue] = true;
          continue outer;
        }
      }
      result[filterValue] = false;
    }
    /* eslint-enable no-labels */

    return result;
  };
};
const getQuicklyFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {
  if (filterModel === undefined || filterModel.quickFilterValues?.length === 0) {
    return rows;
  }
  const isRowMatchingQuickFilter = buildQuickFilterApplier(filterModel, columnsWithDefaultColDef);
  if (isRowMatchingQuickFilter) {
    return rows.filter(row => {
      const result = isRowMatchingQuickFilter(row);
      return filterModel.quickFilterLogicOperator === _xDataGridPro.GridLogicOperator.And ? Object.values(result).every(Boolean) : Object.values(result).some(Boolean);
    });
  }
  return rows;
};
const getFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {
  if (filterModel === undefined || filterModel.items.length === 0) {
    return rows;
  }
  const valueGetters = filterModel.items.map(({
    field
  }) => simplifiedValueGetter(field, columnsWithDefaultColDef.find(column => column.field === field)));
  const filterFunctions = filterModel.items.map(filterItem => {
    const {
      field,
      operator
    } = filterItem;
    const colDef = columnsWithDefaultColDef.find(column => column.field === field);
    if (!colDef.filterOperators) {
      throw new Error(`MUI: No filter operator found for column '${field}'.`);
    }
    const filterOperator = colDef.filterOperators.find(({
      value
    }) => operator === value);
    let parsedValue = filterItem.value;
    if (colDef.valueParser) {
      const parser = colDef.valueParser;
      parsedValue = Array.isArray(filterItem.value) ? filterItem.value?.map(x => parser(x, {}, colDef, apiRef)) : parser(filterItem.value, {}, colDef, apiRef);
    }
    return filterOperator.getApplyFilterFn({
      filterItem,
      value: parsedValue
    }, colDef);
  });
  if (filterModel.logicOperator === _xDataGridPro.GridLogicOperator.Or) {
    return rows.filter(row => filterModel.items.some((_, index) => {
      const value = valueGetters[index](row);
      return filterFunctions[index] === null ? true : filterFunctions[index](value);
    }));
  }
  return rows.filter(row => filterModel.items.every((_, index) => {
    const value = valueGetters[index](row);
    return filterFunctions[index] === null ? true : filterFunctions[index](value);
  }));
};

/**
 * Simulates server data loading
 */
const loadServerRows = (rows, queryOptions, serverOptions, columnsWithDefaultColDef) => {
  const {
    minDelay = 100,
    maxDelay = 300,
    useCursorPagination
  } = serverOptions;
  if (maxDelay < minDelay) {
    throw new Error('serverOptions.minDelay is larger than serverOptions.maxDelay ');
  }
  const delay = (0, _randomGenerator.randomInt)(minDelay, maxDelay);
  const {
    cursor,
    page = 0,
    pageSize
  } = queryOptions;
  let nextCursor;
  let firstRowIndex;
  let lastRowIndex;
  let filteredRows = getFilteredRows(rows, queryOptions.filterModel, columnsWithDefaultColDef);
  const rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);
  filteredRows = [...filteredRows].sort(rowComparator);
  const totalRowCount = filteredRows.length;
  if (!pageSize) {
    firstRowIndex = 0;
    lastRowIndex = filteredRows.length;
  } else if (useCursorPagination) {
    firstRowIndex = cursor ? filteredRows.findIndex(({
      id
    }) => id === cursor) : 0;
    firstRowIndex = Math.max(firstRowIndex, 0); // if cursor not found return 0
    lastRowIndex = firstRowIndex + pageSize;
    nextCursor = lastRowIndex >= filteredRows.length ? undefined : filteredRows[lastRowIndex].id;
  } else {
    firstRowIndex = page * pageSize;
    lastRowIndex = (page + 1) * pageSize;
  }
  const hasNextPage = lastRowIndex < filteredRows.length - 1;
  const response = {
    returnedRows: filteredRows.slice(firstRowIndex, lastRowIndex),
    hasNextPage,
    nextCursor,
    totalRowCount
  };
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(response);
    }, delay); // simulate network latency
  });
};
exports.loadServerRows = loadServerRows;
const findTreeDataRowChildren = (allRows, parentPath, pathKey = 'path', depth = 1 // the depth of the children to find relative to parentDepth, `-1` to find all
) => {
  const parentDepth = parentPath.length;
  const children = [];
  for (let i = 0; i < allRows.length; i += 1) {
    const row = allRows[i];
    const rowPath = row[pathKey];
    if (!rowPath) {
      continue;
    }
    if ((depth < 0 && rowPath.length > parentDepth || rowPath.length === parentDepth + depth) && parentPath.every((value, index) => value === rowPath[index])) {
      children.push(row);
    }
  }
  return children;
};
const getTreeDataFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {
  let filteredRows = [...rows];
  if (filterModel && filterModel.quickFilterValues?.length > 0) {
    filteredRows = getQuicklyFilteredRows(rows, filterModel, columnsWithDefaultColDef);
  }
  if ((filterModel?.items.length ?? 0) > 0) {
    filteredRows = getFilteredRows(filteredRows, filterModel, columnsWithDefaultColDef);
  }
  if (filteredRows.length === rows.length || filteredRows.length === 0) {
    return filteredRows;
  }
  const pathsToIndexesMap = new Map();
  rows.forEach((row, index) => {
    pathsToIndexesMap.set(row.path.join(','), index);
  });
  const includedPaths = new Set();
  filteredRows.forEach(row => {
    includedPaths.add(row.path.join(','));
  });
  const missingChildren = [];

  // include missing children of filtered rows
  filteredRows.forEach(row => {
    const path = row.path;
    if (path) {
      const children = findTreeDataRowChildren(rows, path, 'path', -1);
      children.forEach(child => {
        const subPath = child.path.join(',');
        if (!includedPaths.has(subPath)) {
          missingChildren.push(child);
        }
      });
    }
  });
  filteredRows = missingChildren.concat(filteredRows);
  const missingParents = [];

  // include missing parents of filtered rows
  filteredRows.forEach(row => {
    const path = row.path;
    if (path) {
      includedPaths.add(path.join(','));
      for (let i = 0; i < path.length - 1; i += 1) {
        const subPath = path.slice(0, i + 1).join(',');
        if (!includedPaths.has(subPath)) {
          const index = pathsToIndexesMap.get(subPath);
          if (index !== undefined) {
            missingParents.push(rows[index]);
            includedPaths.add(subPath);
          }
        }
      }
    }
  });
  return missingParents.concat(filteredRows);
};

/**
 * Simulates server data loading
 */
const processTreeDataRows = (rows, queryOptions, serverOptions, columnsWithDefaultColDef) => {
  const {
    minDelay = 100,
    maxDelay = 300
  } = serverOptions;
  const pathKey = 'path';
  // TODO: Support filtering and cursor based pagination
  if (maxDelay < minDelay) {
    throw new Error('serverOptions.minDelay is larger than serverOptions.maxDelay ');
  }
  if (queryOptions.groupKeys == null) {
    throw new Error('serverOptions.groupKeys must be defined to compute tree data ');
  }
  const delay = (0, _randomGenerator.randomInt)(minDelay, maxDelay);

  // apply plain filtering
  const filteredRows = getTreeDataFilteredRows(rows, queryOptions.filterModel, columnsWithDefaultColDef);

  // get root row count
  const rootRowCount = findTreeDataRowChildren(filteredRows, []).length;

  // find direct children referring to the `parentPath`
  const childRows = findTreeDataRowChildren(filteredRows, queryOptions.groupKeys);
  let childRowsWithDescendantCounts = childRows.map(row => {
    const descendants = findTreeDataRowChildren(filteredRows, row[pathKey], pathKey, -1);
    const descendantCount = descendants.length;
    return (0, _extends2.default)({}, row, {
      descendantCount
    });
  });
  if (queryOptions.sortModel) {
    // apply sorting
    const rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);
    childRowsWithDescendantCounts = [...childRowsWithDescendantCounts].sort(rowComparator);
  }
  if (queryOptions.paginationModel && queryOptions.groupKeys.length === 0) {
    // Only paginate root rows, grid should refetch root rows when `paginationModel` updates
    const {
      pageSize,
      page
    } = queryOptions.paginationModel;
    if (pageSize < childRowsWithDescendantCounts.length) {
      childRowsWithDescendantCounts = childRowsWithDescendantCounts.slice(page * pageSize, (page + 1) * pageSize);
    }
  }
  return new Promise(resolve => {
    setTimeout(() => {
      resolve({
        rows: childRowsWithDescendantCounts,
        rootRowCount
      });
    }, delay); // simulate network latency
  });
};
exports.processTreeDataRows = processTreeDataRows;