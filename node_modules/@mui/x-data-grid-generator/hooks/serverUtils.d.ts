import { GridRowModel, GridFilterModel, GridSortModel, GridColDef, GridRowId, GridPaginationModel } from '@mui/x-data-grid-pro';
import { UseDemoDataOptions } from './useDemoData';
export interface FakeServerResponse {
    returnedRows: GridRowModel[];
    nextCursor?: string;
    hasNextPage?: boolean;
    totalRowCount: number;
}
export interface PageInfo {
    totalRowCount?: number;
    nextCursor?: string;
    hasNextPage?: boolean;
    pageSize?: number;
}
export interface DefaultServerOptions {
    minDelay: number;
    maxDelay: number;
    useCursorPagination?: boolean;
}
export type ServerOptions = Partial<DefaultServerOptions>;
export interface QueryOptions {
    cursor?: GridRowId;
    page?: number;
    pageSize?: number;
    filterModel?: GridFilterModel;
    sortModel?: GridSortModel;
    firstRowToRender?: number;
    lastRowToRender?: number;
}
export interface ServerSideQueryOptions {
    cursor?: GridRowId;
    paginationModel?: GridPaginationModel;
    groupKeys?: string[];
    filterModel?: GridFilterModel;
    sortModel?: GridSortModel;
    firstRowToRender?: number;
    lastRowToRender?: number;
}
export declare const DEFAULT_DATASET_OPTIONS: UseDemoDataOptions;
export declare const disableDelay: any;
export declare const DEFAULT_SERVER_OPTIONS: DefaultServerOptions;
/**
 * Simulates server data loading
 */
export declare const loadServerRows: (rows: GridRowModel[], queryOptions: QueryOptions, serverOptions: ServerOptions, columnsWithDefaultColDef: GridColDef[]) => Promise<FakeServerResponse>;
interface ProcessTreeDataRowsResponse {
    rows: GridRowModel[];
    rootRowCount: number;
}
/**
 * Simulates server data loading
 */
export declare const processTreeDataRows: (rows: GridRowModel[], queryOptions: ServerSideQueryOptions, serverOptions: ServerOptions, columnsWithDefaultColDef: GridColDef[]) => Promise<ProcessTreeDataRowsResponse>;
export {};
